HOMEWORK 2

(Don't forget to create a github page.)

2-D grid with 5x5 rooms.
Agent's actions: Left, Right, Up, Down, Suck, and Do Nothing.

Performance measure:
* 4 point for each cleaned up room (changing the room from dirty to clean)
* -1 point for Left
* -1.1 point for Right
* -1.2 point for Up
* -0.3 point for Down
* -0.2 point for Suck
* 0 point for NoOp action
Over a lifetime of 10 time steps. Higher performance points are better.

Map (of Test Case #1):
[.][ ][ ][.][.]
[.][ ][ ][.][.]
[ ][*][ ][ ][.]
[.][ ][.][ ][ ]
[.][ ][ ][.][.]

class Action(Enum):
	MOVE_LEFT = 1,
	MOVE_RIGHT = 2,
	MOVE_UP = 3,
	MOVE_DOWN = 4,
	SUCK = 5,
	NOTHING = 6

Implement 4 algorithms:
* uniform cost tree search, up to search tree depth 10
* uniform cost graph search, up to search tree depth 10
* depth-limited depth-first tree search, with depth limit 10
* depth-limited depth-first graph search, with depth limit 10

tree search - all actions
graph search - separate (directional movements and vacuum actions - suck or do nothing)

Potential programming languages for the homework:
- C
- Python
- Ruby
- Haskell
- Crystal

Tree Search
- You can go several paths many times
Graph Search
- You can go to one path one time.


